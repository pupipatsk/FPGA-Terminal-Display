

---
FILE: Basys3_Master.xdc
---
## This file is a general .xdc for the Basys3 rev B board
## To use it in a project:
## - uncomment the lines corresponding to used pins
## - rename the used ports (in each line, after get_ports) according to the top level signal names in the project

# Clock signal
set_property PACKAGE_PIN W5 [get_ports clk]							
	set_property IOSTANDARD LVCMOS33 [get_ports clk]
	create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk]
 
# Switches
set_property PACKAGE_PIN V17 [get_ports {sw[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[0]}]
set_property PACKAGE_PIN V16 [get_ports {sw[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[1]}]
set_property PACKAGE_PIN W16 [get_ports {sw[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[2]}]
set_property PACKAGE_PIN W17 [get_ports {sw[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[3]}]
set_property PACKAGE_PIN W15 [get_ports {sw[4]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[4]}]
set_property PACKAGE_PIN V15 [get_ports {sw[5]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[5]}]
set_property PACKAGE_PIN W14 [get_ports {sw[6]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[6]}]
set_property PACKAGE_PIN W13 [get_ports {sw[7]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[7]}]
set_property PACKAGE_PIN V2 [get_ports {sw[8]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[8]}]
set_property PACKAGE_PIN T3 [get_ports {sw[9]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[9]}]
set_property PACKAGE_PIN T2 [get_ports {sw[10]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[10]}]
set_property PACKAGE_PIN R3 [get_ports {sw[11]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {sw[11]}]
#set_property PACKAGE_PIN W2 [get_ports {sw[12]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {sw[12]}]
#set_property PACKAGE_PIN U1 [get_ports {sw[13]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {sw[13]}]
#set_property PACKAGE_PIN T1 [get_ports {sw[14]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {sw[14]}]
#set_property PACKAGE_PIN R2 [get_ports {sw[15]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {sw[15]}]
 

## LEDs
#set_property PACKAGE_PIN U16 [get_ports {led[0]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[0]}]
#set_property PACKAGE_PIN E19 [get_ports {led[1]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[1]}]
#set_property PACKAGE_PIN U19 [get_ports {led[2]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[2]}]
#set_property PACKAGE_PIN V19 [get_ports {led[3]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[3]}]
#set_property PACKAGE_PIN W18 [get_ports {led[4]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[4]}]
#set_property PACKAGE_PIN U15 [get_ports {led[5]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[5]}]
#set_property PACKAGE_PIN U14 [get_ports {led[6]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[6]}]
#set_property PACKAGE_PIN V14 [get_ports {led[7]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[7]}]
#set_property PACKAGE_PIN V13 [get_ports {led[8]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[8]}]
#set_property PACKAGE_PIN V3 [get_ports {led[9]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[9]}]
#set_property PACKAGE_PIN W3 [get_ports {led[10]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {led[10]}]
#set_property PACKAGE_PIN U3 [get_ports {led[11]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[11]}]
#set_property PACKAGE_PIN P3 [get_ports {led[12]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[12]}]
#set_property PACKAGE_PIN N3 [get_ports {led[13]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[13]}]
#set_property PACKAGE_PIN P1 [get_ports {led[14]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[14]}]
#set_property PACKAGE_PIN L1 [get_ports {led[15]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {led[15]}]
	
	
##7 segment display
set_property PACKAGE_PIN W7 [get_ports {seg[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {seg[0]}]
set_property PACKAGE_PIN W6 [get_ports {seg[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {seg[1]}]
set_property PACKAGE_PIN U8 [get_ports {seg[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {seg[2]}]
set_property PACKAGE_PIN V8 [get_ports {seg[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {seg[3]}]
set_property PACKAGE_PIN U5 [get_ports {seg[4]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {seg[4]}]
set_property PACKAGE_PIN V5 [get_ports {seg[5]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {seg[5]}]
set_property PACKAGE_PIN U7 [get_ports {seg[6]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {seg[6]}]

set_property PACKAGE_PIN V7 [get_ports dp]							
	set_property IOSTANDARD LVCMOS33 [get_ports dp]

set_property PACKAGE_PIN U2 [get_ports {an[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {an[0]}]
set_property PACKAGE_PIN U4 [get_ports {an[1]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {an[1]}]
set_property PACKAGE_PIN V4 [get_ports {an[2]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {an[2]}]
set_property PACKAGE_PIN W4 [get_ports {an[3]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {an[3]}]


#Buttons
set_property PACKAGE_PIN U18 [get_ports btnC]						
	set_property IOSTANDARD LVCMOS33 [get_ports btnC]
set_property PACKAGE_PIN T18 [get_ports btnU]						
	set_property IOSTANDARD LVCMOS33 [get_ports btnU]
set_property PACKAGE_PIN W19 [get_ports btnL]						
	set_property IOSTANDARD LVCMOS33 [get_ports btnL]
set_property PACKAGE_PIN T17 [get_ports btnR]						
	set_property IOSTANDARD LVCMOS33 [get_ports btnR]
set_property PACKAGE_PIN U17 [get_ports btnD]						
	set_property IOSTANDARD LVCMOS33 [get_ports btnD]
 


##Pmod Header JA
##Sch name = JA1
set_property PACKAGE_PIN J1 [get_ports {JA[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {JA[0]}]
##Sch name = JA2
#set_property PACKAGE_PIN L2 [get_ports {JA[1]}]					
#	set_property IOSTANDARD LVCMOS33 [get_ports {JA[1]}]
##Sch name = JA3
#set_property PACKAGE_PIN J2 [get_ports {JA[2]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[2]}]
##Sch name = JA4
#set_property PACKAGE_PIN G2 [get_ports {JA[3]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[3]}]
##Sch name = JA7
#set_property PACKAGE_PIN H1 [get_ports {JA[4]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[4]}]
##Sch name = JA8
#set_property PACKAGE_PIN K2 [get_ports {JA[5]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[5]}]
##Sch name = JA9
#set_property PACKAGE_PIN H2 [get_ports {JA[6]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[6]}]
##Sch name = JA10
#set_property PACKAGE_PIN G3 [get_ports {JA[7]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JA[7]}]



##Pmod Header JB
##Sch name = JB1
set_property PACKAGE_PIN A14 [get_ports {JB[0]}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {JB[0]}]
##Sch name = JB2
#set_property PACKAGE_PIN A16 [get_ports {JB[1]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[1]}]
##Sch name = JB3
#set_property PACKAGE_PIN B15 [get_ports {JB[2]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[2]}]
##Sch name = JB4
#set_property PACKAGE_PIN B16 [get_ports {JB[3]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[3]}]
##Sch name = JB7
#set_property PACKAGE_PIN A15 [get_ports {JB[4]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[4]}]
##Sch name = JB8
#set_property PACKAGE_PIN A17 [get_ports {JB[5]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[5]}]
##Sch name = JB9
#set_property PACKAGE_PIN C15 [get_ports {JB[6]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[6]}]
##Sch name = JB10 
#set_property PACKAGE_PIN C16 [get_ports {JB[7]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JB[7]}]
 


##Pmod Header JC
##Sch name = JC1
#set_property PACKAGE_PIN K17 [get_ports {JC[0]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[0]}]
##Sch name = JC2
#set_property PACKAGE_PIN M18 [get_ports {JC[1]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[1]}]
##Sch name = JC3
#set_property PACKAGE_PIN N17 [get_ports {JC[2]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[2]}]
##Sch name = JC4
#set_property PACKAGE_PIN P18 [get_ports {JC[3]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[3]}]
##Sch name = JC7
#set_property PACKAGE_PIN L17 [get_ports {JC[4]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[4]}]
##Sch name = JC8
#set_property PACKAGE_PIN M19 [get_ports {JC[5]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[5]}]
##Sch name = JC9
#set_property PACKAGE_PIN P17 [get_ports {JC[6]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[6]}]
##Sch name = JC10
#set_property PACKAGE_PIN R18 [get_ports {JC[7]}]					
	#set_property IOSTANDARD LVCMOS33 [get_ports {JC[7]}]


##Pmod Header JXADC
##Sch name = XA1_P
#set_property PACKAGE_PIN J3 [get_ports {JXADC[0]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[0]}]
##Sch name = XA2_P
#set_property PACKAGE_PIN L3 [get_ports {JXADC[1]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[1]}]
##Sch name = XA3_P
#set_property PACKAGE_PIN M2 [get_ports {JXADC[2]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[2]}]
##Sch name = XA4_P
#set_property PACKAGE_PIN N2 [get_ports {JXADC[3]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[3]}]
##Sch name = XA1_N
#set_property PACKAGE_PIN K3 [get_ports {JXADC[4]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[4]}]
##Sch name = XA2_N
#set_property PACKAGE_PIN M3 [get_ports {JXADC[5]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[5]}]
##Sch name = XA3_N
#set_property PACKAGE_PIN M1 [get_ports {JXADC[6]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[6]}]
##Sch name = XA4_N
#set_property PACKAGE_PIN N1 [get_ports {JXADC[7]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {JXADC[7]}]



#VGA Connector
set_property PACKAGE_PIN G19 [get_ports {vgaRed[0]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[0]}]
set_property PACKAGE_PIN H19 [get_ports {vgaRed[1]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[1]}]
set_property PACKAGE_PIN J19 [get_ports {vgaRed[2]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[2]}]
set_property PACKAGE_PIN N19 [get_ports {vgaRed[3]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaRed[3]}]
set_property PACKAGE_PIN N18 [get_ports {vgaBlue[0]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[0]}]
set_property PACKAGE_PIN L18 [get_ports {vgaBlue[1]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[1]}]
set_property PACKAGE_PIN K18 [get_ports {vgaBlue[2]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[2]}]
set_property PACKAGE_PIN J18 [get_ports {vgaBlue[3]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaBlue[3]}]
set_property PACKAGE_PIN J17 [get_ports {vgaGreen[0]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[0]}]
set_property PACKAGE_PIN H17 [get_ports {vgaGreen[1]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[1]}]
set_property PACKAGE_PIN G17 [get_ports {vgaGreen[2]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[2]}]
set_property PACKAGE_PIN D17 [get_ports {vgaGreen[3]}]				
	set_property IOSTANDARD LVCMOS33 [get_ports {vgaGreen[3]}]
set_property PACKAGE_PIN P19 [get_ports Hsync]						
	set_property IOSTANDARD LVCMOS33 [get_ports Hsync]
set_property PACKAGE_PIN R19 [get_ports Vsync]						
	set_property IOSTANDARD LVCMOS33 [get_ports Vsync]


#USB-RS232 Interface
set_property PACKAGE_PIN B18 [get_ports RsRx]						
	set_property IOSTANDARD LVCMOS33 [get_ports RsRx]
set_property PACKAGE_PIN A18 [get_ports RsTx]						
	set_property IOSTANDARD LVCMOS33 [get_ports RsTx]


##USB HID (PS/2)
#set_property PACKAGE_PIN C17 [get_ports PS2Clk]						
	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Clk]
	#set_property PULLUP true [get_ports PS2Clk]
#set_property PACKAGE_PIN B17 [get_ports PS2Data]					
	#set_property IOSTANDARD LVCMOS33 [get_ports PS2Data]	
	#set_property PULLUP true [get_ports PS2Data]


##Quad SPI Flash
##Note that CCLK_0 cannot be placed in 7 series devices. You can access it using the
##STARTUPE2 primitive.
#set_property PACKAGE_PIN D18 [get_ports {QspiDB[0]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[0]}]
#set_property PACKAGE_PIN D19 [get_ports {QspiDB[1]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[1]}]
#set_property PACKAGE_PIN G18 [get_ports {QspiDB[2]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[2]}]
#set_property PACKAGE_PIN F18 [get_ports {QspiDB[3]}]				
	#set_property IOSTANDARD LVCMOS33 [get_ports {QspiDB[3]}]
#set_property PACKAGE_PIN K19 [get_ports QspiCSn]					
	#set_property IOSTANDARD LVCMOS33 [get_ports QspiCSn]



---
FILE: font.data
---
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
10101010
10000010
10000010
10111010
10010010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
01111100
11111110
11111110
11010110
11111110
11111110
11000110
11101110
11111110
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01101100
11111110
11111110
01111100
00111000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00111000
01111100
11111110
01111100
00111000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00111000
00111000
00111000
11101110
11101110
11101110
00010000
00111000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00111000
01111100
11111110
11111110
01010100
00010000
00111000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00011000
00111100
00111100
00011000
00000000
00000000
00000000
00000000
00000000
00000000
11111111
11111111
11111111
11111111
11111111
11111111
11100111
11000011
11000011
11100111
11111111
11111111
11111111
11111111
11111111
11111111
00000000
00000000
00000000
00000000
00000000
00111100
01100110
01000010
01000010
01100110
00111100
00000000
00000000
00000000
00000000
00000000
11111111
11111111
11111111
11111111
11111111
11000011
10011001
10111101
10111101
10011001
11000011
11111111
11111111
11111111
11111111
11111111
00000000
00000000
00011110
00000110
00001010
00010000
00010000
01111100
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
10000010
01111100
00010000
00010000
01111100
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00011110
00010010
00011110
00010000
00010000
00010000
00010000
11110000
11110000
11100000
00000000
00000000
00000000
00000000
00000000
00000000
00111110
00100010
00111110
00100010
00100010
00100010
00101110
11101110
11101100
11000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
10010010
01111100
01000100
10000010
10000010
10000010
01000100
01111100
10010010
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11000000
11100000
11110000
11111000
11110000
11100000
11000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00011000
00111000
01111000
11111000
01111000
00111000
00011000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00111000
01010100
10010010
00010000
00010000
10010010
01010100
00111000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
01000100
01000100
01000100
01000100
01000100
01000100
01000100
00000000
01000100
01000100
00000000
00000000
00000000
00000000
00000000
00000000
01111110
11110010
11110010
11110010
01110010
00010010
00010010
00010010
00010010
00010010
00000000
00000000
00000000
00000000
00000000
01111000
10000100
01000000
00110000
01001000
10000100
10000100
01001000
00110000
00001000
10000100
01111000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
11111110
11111110
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00111000
01010100
10010010
00010000
00010000
10010010
01010100
00111000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00111000
01010100
10010010
00010000
00010000
00010000
00010000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00010000
00010000
00010000
00010000
10010010
01010100
00111000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00001000
00000100
11111110
00000100
00001000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00100000
01000000
11111110
01000000
00100000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10000000
10000000
10000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00100100
01000010
11111111
01000010
00100100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00111000
01111100
11111110
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
11111110
01111100
00111000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00000000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
01001000
01001000
01001000
01001000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01000100
01000100
11111110
01000100
01000100
01000100
11111110
01000100
01000100
00000000
00000000
00000000
00000000
00000000
00010000
00010000
01111100
10010010
10010000
10000000
01111100
00000010
00010010
10010010
01111100
00010000
00010000
00000000
00000000
00000000
00000000
00000000
01100000
11110010
01100100
00001000
00010000
00100000
01001100
10011110
00001100
00000000
00000000
00000000
00000000
00000000
00000000
00110000
01001000
01001000
01001000
00110010
01001010
10000100
10000100
10000100
01111010
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00010000
00100000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001000
00010000
00100000
00100000
00100000
00100000
00100000
00100000
00010000
00001000
00000000
00000000
00000000
00000000
00000000
00000000
00100000
00010000
00001000
00001000
00001000
00001000
00001000
00001000
00010000
00100000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
01010100
00111000
11111110
00111000
01010100
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00010000
11111110
00010000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00010000
00100000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00110000
00110000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000010
00000100
00001000
00010000
00100000
01000000
10000000
00000000
00000000
00000000
00000000
00000000
00000000
00111000
01000100
10000010
10000010
10010010
10010010
10000010
10000010
01000100
00111000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00110000
01010000
00010000
00010000
00010000
00010000
00010000
00010000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
00000010
00000010
00000100
00001000
00010000
00100000
01000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
00000010
00000010
00111100
00000010
00000010
00000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000100
00001100
00010100
00100100
01000100
10000100
11111110
00000100
00000100
00000100
00000000
00000000
00000000
00000000
00000000
00000000
11111110
10000000
10000000
10000000
11111100
10000010
00000010
00000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000000
10000000
10000000
11111100
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
11111110
00000010
00000010
00000100
00001000
00010000
00010000
00010000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
01000100
01111100
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
10000010
10000010
01111110
00000010
00000010
00000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00000000
00000000
00000000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00000000
00000000
00000000
00010000
00010000
00010000
00100000
00000000
00000000
00000000
00000000
00000000
00000100
00001000
00010000
00100000
01000000
00100000
00010000
00001000
00000100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
00000000
00000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01000000
00100000
00010000
00001000
00000100
00001000
00010000
00100000
01000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
00000010
00001100
00010000
00010000
00000000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
10111010
10101010
10101010
10011100
10000000
10000000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00111000
01000100
10000010
10000010
10000010
11111110
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
11111100
10000010
10000010
10000010
11111100
10000010
10000010
10000010
10000010
11111100
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000000
10000000
10000000
10000000
10000000
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
11111000
10000100
10000010
10000010
10000010
10000010
10000010
10000010
10000100
11111000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
10000000
10000000
10000000
11111100
10000000
10000000
10000000
10000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
11111110
10000000
10000000
10000000
11111100
10000000
10000000
10000000
10000000
10000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000000
10000000
10011110
10000010
10000010
10000010
10000010
01111110
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
10000010
11111110
10000010
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
01111100
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00111110
00000100
00000100
00000100
00000100
00000100
00000100
00000100
10000100
01111000
00000000
00000000
00000000
00000000
00000000
00000000
10000100
10001000
10010000
10100000
11000000
10100000
10010000
10001000
10000100
10000010
00000000
00000000
00000000
00000000
00000000
00000000
10000000
10000000
10000000
10000000
10000000
10000000
10000000
10000000
10000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
10000010
11000110
10101010
10010010
10010010
10000010
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
10000010
11000010
10100010
10010010
10001010
10000110
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
10000010
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
11111100
10000010
10000010
10000010
11111100
10000000
10000000
10000000
10000000
10000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
10000010
10000010
10000010
10010010
10010010
10010010
01111100
00001000
00000100
00000000
00000000
00000000
00000000
11111100
10000010
10000010
10000010
11111100
10000100
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000000
01100000
00110000
00001100
00000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
11111110
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
10000010
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
10000010
10000010
10000010
10000010
01000100
00101000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
10000010
10000010
10010010
10010010
10010010
10101010
01000100
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
01000100
00101000
00010000
00101000
01000100
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
01000100
00101000
00010000
00010000
00010000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
00000010
00000100
00001000
00010000
00100000
01000000
10000000
10000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00111000
00100000
00100000
00100000
00100000
00100000
00100000
00100000
00100000
00111000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10000000
01000000
00100000
00010000
00001000
00000100
00000010
00000000
00000000
00000000
00000000
00000000
00000000
00111000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00111000
00000000
00000000
00000000
00000000
00010000
00101000
01000100
10000010
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
00000000
00000000
00000000
00100000
00100000
00100000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111000
00000100
00000100
01111100
10000100
10000100
01111110
00000000
00000000
00000000
00000000
00000000
00000000
10000000
10000000
10000000
10111100
11000010
10000010
10000010
10000010
10000010
11111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000000
10000000
10000000
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000010
00000010
00000010
01111010
10000110
10000010
10000010
10000010
10000010
01111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
11111110
10000000
10000000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00011100
00100000
00100000
11111000
00100000
00100000
00100000
00100000
00100000
00100000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111110
10000010
10000010
10000010
10000010
10000110
01111010
00000010
00000010
01111100
00000000
00000000
00000000
10000000
10000000
10000000
10111100
11000010
10000010
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00000000
01110000
00010000
00010000
00010000
00010000
00010000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00001000
00001000
00000000
00111000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
01110000
00000000
00000000
00000000
10000000
10000000
10000000
10000110
10011000
11100000
10010000
10001000
10000100
10000010
00000000
00000000
00000000
00000000
00000000
00000000
01100000
00100000
00100000
00100000
00100000
00100000
00100000
00100000
00100000
00011100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11101100
10010010
10010010
10010010
10010010
10010010
10010010
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10111100
11000010
10000010
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10111100
11000010
10000010
10000010
10000010
11000010
10111100
10000000
10000000
10000000
00000000
00000000
00000000
00000000
00000000
00000000
01111110
10000010
10000010
10000010
10000010
10000110
01111010
00000010
00000010
00000010
00000000
00000000
00000000
00000000
00000000
00000000
10111100
11000010
10000000
10000000
10000000
10000000
10000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111110
10000000
10000000
01111100
00000010
00000010
11111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00100000
00100000
11111100
00100000
00100000
00100000
00100000
00100000
00011100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
10000010
10000010
10000110
01111010
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
10000010
01000100
00101000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
10010010
10010010
10010010
01101100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10000010
01000100
00101000
00010000
00101000
01000100
10000010
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
10000010
10000010
10000010
10000110
01111010
00000010
00000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
11111110
00000100
00001000
00010000
00100000
01000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00001100
00010000
00010000
00010000
01100000
00010000
00010000
00010000
00010000
00001100
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00000000
00000000
00000000
01100000
00010000
00010000
00010000
00001100
00010000
00010000
00010000
00010000
01100000
00000000
00000000
00000000
00000000
00000000
00000000
01100010
10010010
10001100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00101000
01000100
10000010
10000010
10000010
11111110
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000000
10000000
10000000
10000000
10000000
10000010
10000010
01111100
00010000
00001000
01110000
00000000
00000000
00000000
01000100
01000100
00000000
10000010
10000010
10000010
10000010
10000010
10000110
01111010
00000000
00000000
00000000
00000000
00000000
00001000
00010000
00100000
00000000
01111100
10000010
10000010
11111110
10000000
10000000
01111110
00000000
00000000
00000000
00000000
00000000
00010000
00101000
01000100
00000000
01111100
00000010
00000010
01111110
10000010
10000010
01111110
00000000
00000000
00000000
00000000
00000000
00000000
01000100
01000100
00000000
01111100
00000010
00000010
01111110
10000010
10000010
01111110
00000000
00000000
00000000
00000000
00000000
00100000
00010000
00001000
00000000
01111100
00000010
00000010
01111110
10000010
10000010
01111110
00000000
00000000
00000000
00000000
00000000
00011000
00100100
00011000
00000000
01111100
00000010
00000010
01111110
10000010
10000010
01111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000000
10000000
10000000
10000010
01111100
00010000
00001000
01110000
00000000
00000000
00010000
00101000
01000100
00000000
01111100
10000010
10000010
11111110
10000000
10000000
01111110
00000000
00000000
00000000
00000000
00000000
00000000
01000100
01000100
00000000
01111100
10000010
10000010
11111110
10000000
10000000
01111110
00000000
00000000
00000000
00000000
00000000
00100000
00010000
00001000
00000000
01111100
10000010
10000010
11111110
10000000
10000000
01111110
00000000
00000000
00000000
00000000
00000000
00000000
01001000
01001000
00000000
01110000
00010000
00010000
00010000
00010000
00010000
01111100
00000000
00000000
00000000
00000000
00000000
00010000
00101000
01000100
00000000
01110000
00010000
00010000
00010000
00010000
00010000
01111100
00000000
00000000
00000000
00000000
00000000
01000000
00100000
00010000
00000000
01110000
00010000
00010000
00010000
00010000
00010000
01111100
00000000
00000000
00000000
00000000
01000100
01000100
00000000
00111000
01000100
10000010
10000010
10000010
11111110
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00111000
01000100
01000100
00111000
01000100
10000010
10000010
10000010
11111110
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00001100
00110000
00000000
11111110
10000000
10000000
10000000
11111100
10000000
10000000
10000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01101100
10010010
00010010
01111110
10010000
10010000
01101110
00000000
00000000
00000000
00000000
00000000
00000000
00111110
01001000
10001000
10001000
11111110
10001000
10001000
10001000
10001000
10001110
00000000
00000000
00000000
00000000
00000000
00010000
00101000
01000100
00000000
01111100
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
01000100
01000100
00000000
01111100
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00100000
00010000
00001000
00000000
01111100
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00010000
00101000
01000100
00000000
10000010
10000010
10000010
10000010
10000010
10000110
01111010
00000000
00000000
00000000
00000000
00000000
00100000
00010000
00001000
00000000
10000010
10000010
10000010
10000010
10000010
10000110
01111010
00000000
00000000
00000000
00000000
00000000
00000000
01000100
01000100
00000000
10000010
10000010
10000010
10000010
10000010
10000110
01111010
00000010
00000010
01111100
00000000
01000100
01000100
00000000
01111100
10000010
10000010
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
01000100
01000100
00000000
10000010
10000010
10000010
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
01111100
10000010
10000000
10000000
10000010
01111100
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00111000
01000100
01000000
01000000
11110000
01000000
01000000
01000000
01110010
11001100
00000000
00000000
00000000
00000000
00000000
00000000
10000010
10000010
01000100
00101000
00010000
01111100
00010000
01111100
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
11111000
10000100
10000100
11111000
10000000
10001000
10011100
10001000
10001000
10000100
00000000
00000000
00000000
00000000
00000000
00000000
00001100
00010010
00010000
00010000
00010000
01111100
00010000
00010000
00010000
00010000
00010000
10010000
01100000
00000000
00000000
00001000
00010000
00100000
00000000
01111100
00000010
00000010
01111110
10000010
10000010
01111110
00000000
00000000
00000000
00000000
00000000
00001000
00010000
00100000
00000000
01110000
00010000
00010000
00010000
00010000
00010000
01111100
00000000
00000000
00000000
00000000
00000000
00001000
00010000
00100000
00000000
01111100
10000010
10000010
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00001000
00010000
00100000
00000000
10000010
10000010
10000010
10000010
10000010
10000110
01111010
00000000
00000000
00000000
00000000
00000000
01100100
10011000
00000000
00000000
10111100
11000010
10000010
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
01100100
10011000
00000000
10000010
11000010
10100010
10010010
10001010
10000110
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00111000
00000100
00111100
01000100
00111100
00000000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00111000
01000100
01000100
01000100
00111000
00000000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00000000
00010000
00010000
01100000
10000000
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111100
10000000
10000000
10000000
10000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111100
00000100
00000100
00000100
00000100
00000000
00000000
00000000
00000000
00000000
00000000
10000000
10000000
10000100
10001000
10010000
00100000
01000000
10000000
00111000
00000100
00001000
00010000
00111100
00000000
00000000
00000000
10000000
10000000
10000000
10000100
10001000
00010000
00100000
01000100
10001100
00010100
00111100
00000100
00000100
00000000
00000000
00000000
00000000
00010000
00010000
00000000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00100100
01001000
10010000
01001000
00100100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10010000
01001000
00100100
01001000
10010000
00000000
00000000
00000000
00000000
00000000
00000000
00010001
01000100
00010001
01000100
00010001
01000100
00010001
01000100
00010001
01000100
00010001
01000100
00010001
01000100
00010001
01000100
01010101
10101010
01010101
10101010
01010101
10101010
01010101
10101010
01010101
10101010
01010101
10101010
01010101
10101010
01010101
10101010
11011101
01110111
11011101
01110111
11011101
01110111
11011101
01110111
11011101
01110111
11011101
01110111
11011101
01110111
11011101
01110111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
11111000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
11111000
00001000
11111000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00100100
00100100
00100100
00100100
00100100
00100100
00100100
11100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00000000
00000000
00000000
00000000
00000000
11111000
00001000
11111000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00100100
00100100
00100100
00100100
00100100
11100100
00000100
11100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00000000
00000000
00000000
00000000
00000000
11111100
00000100
11100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
11100100
00000100
11111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00100100
00100100
00100100
00100100
00100100
00100100
00100100
11111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001000
00001000
00001000
00001000
00001000
11111000
00001000
11111000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
11111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
11111111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001111
00001000
00001111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100111
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100111
00100000
00111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00111111
00100000
00100111
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
11100111
00000000
11111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111111
00000000
11100111
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100111
00100000
00100111
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00000000
00000000
00000000
00000000
00000000
11111111
00000000
11111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00100100
00100100
00100100
00100100
00100100
11100111
00000000
11100111
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00001000
00001000
00001000
00001000
00001000
11111111
00000000
11111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00100100
00100100
00100100
00100100
00100100
00100100
00100100
11111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111111
00000000
11111111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111111
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001000
00001000
00001000
00001000
00001000
00001111
00001000
00001111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001111
00001000
00001111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00111111
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
11111111
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00100100
00001000
00001000
00001000
00001000
00001000
11111111
00001000
11111111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
11111000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001111
00001000
00001000
00001000
00001000
00001000
00001000
00001000
00001000
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
11110000
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
00001111
11111111
11111111
11111111
11111111
11111111
11111111
11111111
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01110100
10001000
10001000
10001000
10001000
10001000
01110110
00000000
00000000
00000000
00000000
00000000
00000000
00111000
01000100
10000100
10000100
10011000
10000100
10000010
10000010
10000010
10011100
10000000
10000000
00000000
00000000
00000000
00000000
11111110
10000000
10000000
10000000
10000000
10000000
10000000
10000000
10000000
10000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
01000100
01000100
01000100
01000100
01000100
01000010
00000000
00000000
00000000
00000000
00000000
00000000
11111110
01000000
00100000
00010000
00001000
00010000
00100000
01000000
10000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111110
10001000
10000100
10000100
10000100
10000100
01111000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
10000100
10000100
10000100
10000100
10000100
11000100
10111010
10000000
10000000
10000000
00000000
00000000
00000000
00000000
00000000
00000000
01111110
10010000
00010000
00010000
00010000
00010000
00001100
00000000
00000000
00000000
00000000
00000000
00000000
00010000
01111100
10010010
10010010
10010010
10010010
10010010
10010010
01111100
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00111000
01000100
10000010
10000010
11111110
10000010
10000010
10000010
01000100
00111000
00000000
00000000
00000000
00000000
00000000
00000000
00111000
01000100
10000010
10000010
10000010
10000010
10000010
01000100
00101000
11101110
00000000
00000000
00000000
00000000
00000000
00000000
01111100
01000000
00100000
00010000
01111000
10000100
10000010
10000010
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01101100
10010010
10010010
10010010
01101100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
01111100
10010010
10010010
10010010
10010010
10010010
01111100
00010000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000000
01111000
10000000
10000010
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
10000010
10000010
10000010
10000010
10000010
10000010
10000010
10000010
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
11111110
00000000
00000000
11111110
00000000
00000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00010000
11111110
00010000
00010000
00010000
00000000
11111110
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00100000
00010000
00001000
00000100
00001000
00010000
00100000
00000000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001000
00010000
00100000
01000000
00100000
00010000
00001000
00000000
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00001100
00010010
00010010
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
00010000
10010000
10010000
01100000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00010000
00010000
00000000
11111110
00000000
00010000
00010000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01100100
10011000
00000000
01100100
10011000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01110000
10001000
10001000
10001000
01110000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00110000
00110000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00110000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00001110
00001000
00001000
00001000
00001000
00001000
00001000
11001000
00101000
00011000
00001000
00000000
00000000
00000000
00000000
00000000
10111000
01000100
01000100
01000100
01000100
01000100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01100000
10010000
00010000
00100000
01000000
11110000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
01111100
01111100
01111100
01111100
01111100
01111100
01111100
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000
00000000


---
FILE: ClockDiv.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 08/27/2024 10:23:29 AM
// Design Name: 
// Module Name: ClockDiv
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module ClockDiv(
    output reg clkDiv,
    input wire clock
    );
    reg [22:0] counter;
    
    initial begin
        counter <= 0;
    end
    
    always @(posedge clock) begin
        if(counter == 100000) begin
            counter <= 0;
            clkDiv <= ~clkDiv;
        end else begin
            counter <= counter + 1;
        end
    end
endmodule


---
FILE: baudrate_gen.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/31/2021 11:04:18 PM
// Design Name: 
// Module Name: baudrate_gen
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module baudrate_gen(
    input clk,
    output reg baud
    );
    
    integer counter;
    always @(posedge clk) begin
        counter = counter + 1;
        if (counter == 325) begin counter = 0; baud = ~baud; end 
        // Clock = 10ns
        // ClockFreq = 1/10ns = 100 MHz
        // Baudrate = 9600
        // counter = ClockFreq/Baudrate/16/2
        // sampling every 16 ticks
    end
    
endmodule


---
FILE: system.v
---
`timescale 1ns / 1ps

module system (
    input wire clk,              // System clock
    output wire [0:0] JA,           // UART TX (Transmit)
    input wire [0:0] JB,            // UART RX (Receive)
    input wire [7:0] sw,         // Switches for transmitting data
    input btnC,                  // Button to trigger transmission
    output wire [6:0] seg,       // Seven-segment display segments
    output wire dp,              // Decimal point
    output wire [3:0] an,         // Seven-segment display anodes
    output wire Hsync, Vsync,
    output wire [3:0] vgaRed, vgaGreen, vgaBlue
);

    // Internal Signals
    wire [7:0] received_data;    // Data received via UART
    wire valid;                  // Signal for valid received data
    wire [7:0] data_to_transmit; // Data to transmit (from switches)
    assign data_to_transmit = sw; // Map switches to transmit data
    
    wire clkDiv;
    ClockDiv cd(clkDiv, clk);
    
    // VGA module for displaying characters
    vga vga_inst(
        .clk(clk),
        .char(received_data),
        .en(valid),
        .hsync(Hsync),
        .vsync(Vsync),
        .rgb({vgaRed, vgaGreen, vgaBlue})
    );

    // UART Module
    uart uart_inst (
        .clk(clk),
        .RsRx(JB[0]),              // RX connected to JA[1]
        .RsTx(JA[0]),              // TX connected to JA[0]
        .char(received_data),      // Received character
        .en(valid),                // Valid received data signal
        .data_transmit(data_to_transmit), // Data to transmit
        .btnC(btnC)                // Transmit trigger
    );
    
    // Seven-Segment Display
    QuadSevenSegmentDisplay display (
        .seg(seg),
        .dp(dp),
        .an(an),
        .num3(received_data[7:4]), // High nibble of received data
        .num2(received_data[3:0]), // Low nibble of received data
        .num1(data_to_transmit[7:4]), // High nibble of transmitted data
        .num0(data_to_transmit[3:0]), // Low nibble of transmitted data
        .clk(clkDiv)
    );

endmodule

---
FILE: uart_tx.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/31/2021 10:15:58 PM
// Design Name: 
// Module Name: uart_tx
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

module uart_tx(
    input clk,
    input [7:0] data_transmit,
    input ena,
    output reg sent,
    output reg bit_out
    );
    
    reg last_ena;
    reg sending = 0;
    reg [7:0] count;
    reg [7:0] temp;
    
    always@(posedge clk) begin
        if (~sending & ~last_ena & ena) begin
            temp <= data_transmit;
            sending <= 1;
            sent <= 0;
            count <= 0;
        end
        
        last_ena <= ena;
        
        if (sending)    count <= count + 1;
        else            begin count <= 0; bit_out <= 1; end
        
        // sampling every 16 ticks
        case (count)
            8'd8: bit_out <= 0;
            8'd24: bit_out <= temp[0];  
            8'd40: bit_out <= temp[1];
            8'd56: bit_out <= temp[2];
            8'd72: bit_out <= temp[3];
            8'd88: bit_out <= temp[4];
            8'd104: bit_out <= temp[5];
            8'd120: bit_out <= temp[6];
            8'd136: bit_out <= temp[7];
            8'd152: begin sent <= 1; sending <= 0; end
        endcase
    end
endmodule

---
FILE: uart_rx.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/31/2021 10:15:58 PM
// Design Name: 
// Module Name: uart_rx
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module uart_rx(
    input clk,
    input bit_in,
    output reg received,
    output reg [7:0] data_out
    );
    
    reg last_bit;
    reg receiving = 0;
    reg [7:0] count;
    
    always@(posedge clk) begin
        if (~receiving & last_bit & ~bit_in) begin
            receiving <= 1;
            received <= 0;
            count <= 0;
        end

        last_bit <= bit_in;
        count <= (receiving) ? count+1 : 0;
        
        // sampling every 16 ticks
        case (count)
            8'd24:  data_out[0] <= bit_in;
            8'd40:  data_out[1] <= bit_in;
            8'd56:  data_out[2] <= bit_in;
            8'd72:  data_out[3] <= bit_in;
            8'd88:  data_out[4] <= bit_in;
            8'd104: data_out[5] <= bit_in;
            8'd120: data_out[6] <= bit_in;
            8'd136: data_out[7] <= bit_in;
            8'd152: begin received <= 1; receiving <= 0; end
        endcase
    end
endmodule

---
FILE: uart.v
---
`timescale 1ns / 1ps


module uart(
    input clk,                   // System clock
    input RsRx,                  // UART RX input
    output RsTx,                 // UART TX output
    output reg [7:0] char,       // Received UART character
    output reg en,               // Enable signal for received character
    input [7:0] data_transmit,   // Data to be transmitted
    input btnC                   // Transmit enable signal (button press)
);

    // Internal Signals
    reg last_rec;                // Edge detection for received data
    reg [7:0] data_in;           // Temporary storage for received data
    wire [7:0] data_out;         // Received data from uart_rx
    wire received;               // Signal indicating data received
    wire sent;                   // Signal indicating data transmitted
    wire baud;                   // Baud rate clock

    // Instantiate the baud rate generator
    baudrate_gen baud_generator(
        .clk(clk),
        .baud(baud)
    );

    // Instantiate UART receiver
    uart_rx receiver(
        .clk(baud),
        .bit_in(RsRx),
        .received(received),
        .data_out(data_out)
    );

    // Instantiate UART transmitter
    uart_tx transmitter(
        .clk(baud),
        .data_transmit(data_transmit),
        .ena(btnC),
        .sent(sent),
        .bit_out(RsTx)
    );

    // Receive Logic
    always @(posedge clk) begin
        if (en) en <= 0; // Reset enable after 1 cycle
        if (~last_rec & received) begin // Edge detect for received data
            data_in <= data_out;       // Store received data
            if ((data_out >= 32 && data_out <= 126) || data_out == 13) begin
                char <= data_out;      // Valid ASCII character
                en <= 1;              // Set enable for valid character
            end
        end
        last_rec <= received;          // Update last_rec for edge detection
    end

endmodule


---
FILE: Dflipflop.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Module Name: Dflipflop
//////////////////////////////////////////////////////////////////////////////////


module Dflipflop(
    output reg Q,
    output notQ,
    input D,
    input clk
    );
    
    assign notQ = ~Q;
    
    always @(posedge clk) begin
        Q <= D;
    end
    
endmodule


---
FILE: QuadSevenSegmentDisplay.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Module Name: QuadSevenSegmentDisplay
// Description: Common Anode
//////////////////////////////////////////////////////////////////////////////////


module QuadSevenSegmentDisplay(
    output [6:0] seg, // data to display
    output dp, // dot point
    output [3:0] an, // active display
    input [3:0] num3, // most significant digit
    input [3:0] num2,
    input [3:0] num1,
    input [3:0] num0, // least significant digit
    input clk
    );
    
    // State transition for rotate active display and number to display
    reg [1:0] state; // present state 2-bits
    always @(posedge clk) begin
        state <= state + 1;
    end
    
    reg [3:0] activeAnodes; // active display
    reg [3:0] hex;
    always @(state) begin
        case(state)
            2'b00 : begin // least sig.
                activeAnodes = 4'b0001;
                hex = num0; end
            2'b01 : begin
                activeAnodes = 4'b0010;
                hex = num1; end
            2'b10 : begin
                activeAnodes = 4'b0100;
                hex = num2; end
            2'b11 : begin // most sig.
                activeAnodes = 4'b1000;
                hex = num3; end
        endcase
    end
    
    // Display to Hardware
    HexTo7SegmentDecoder decoder(seg, hex);
    assign dp = 0; // No dot point
    assign an = ~activeAnodes; // Active low
    
endmodule


---
FILE: HexTo7SegmentDecoder.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Module Name: HexTo7SegmentDecoder
//////////////////////////////////////////////////////////////////////////////////


module HexTo7SegmentDecoder(
    output [6:0] seg_output,
    input [3:0] hex
    );
// 7-segment encoding
//      0
//     ---
//  5 |   | 1
//     --- <--6
//  4 |   | 2
//     ---
//      3
    reg [6:0] seg_output;

    always @(hex)
        case (hex)
          4'b0001 : seg_output = 7'b1111001;   // 1
          4'b0010 : seg_output = 7'b0100100;   // 2
          4'b0011 : seg_output = 7'b0110000;   // 3
          4'b0100 : seg_output = 7'b0011001;   // 4
          4'b0101 : seg_output = 7'b0010010;   // 5
          4'b0110 : seg_output = 7'b0000010;   // 6
          4'b0111 : seg_output = 7'b1111000;   // 7
          4'b1000 : seg_output = 7'b0000000;   // 8
          4'b1001 : seg_output = 7'b0010000;   // 9
          4'b1010 : seg_output = 7'b0001000;   // A
          4'b1011 : seg_output = 7'b0000011;   // b
          4'b1100 : seg_output = 7'b1000110;   // C
          4'b1101 : seg_output = 7'b0100001;   // d
          4'b1110 : seg_output = 7'b0000110;   // E
          4'b1111 : seg_output = 7'b0001110;   // F
          default : seg_output = 7'b1000000;   // 0
      endcase
			
endmodule


---
FILE: Debouncer.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 10/06/2024 10:18:56 PM
// Design Name: 
// Module Name: Debouncer
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module Debouncer(
    output reg signal_out, // Debounced signal output
    input async_sinal_in, // Asynchronous signal input
    input clk
    );
    
    wire Q1, notQ1, Q2, notQ2;
    
    Dflipflop DFF1(Q1, notQ1, async_sinal_in, clk);
    Dflipflop DFF2(Q2, notQ2, Q1, clk);

    always @(posedge clk) begin
        if (Q1 == Q2) signal_out <= Q2;
    end
    
endmodule


---
FILE: vga_text.v
---
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 12/01/2024 12:24:42 AM
// Design Name: 
// Module Name: vga_text
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module vga_sync(
    input wire clk, reset,
    output wire hsync, vsync, video_on, p_tick,
    output wire [9:0] x, y
    );
    // constant declarations for VGA sync parameters
    localparam H_DISPLAY       = 640; // horizontal display area
    localparam H_L_BORDER      =  48; // horizontal left border
    localparam H_R_BORDER      =  16; // horizontal right border
    localparam H_RETRACE       =  96; // horizontal retrace
    localparam H_MAX           = H_DISPLAY + H_L_BORDER + H_R_BORDER + H_RETRACE - 1;
    localparam START_H_RETRACE = H_DISPLAY + H_R_BORDER;
    localparam END_H_RETRACE   = H_DISPLAY + H_R_BORDER + H_RETRACE - 1;

    localparam V_DISPLAY       = 480; // vertical display area
    localparam V_T_BORDER      =  10; // vertical top border
    localparam V_B_BORDER      =  33; // vertical bottom border
    localparam V_RETRACE       =   2; // vertical retrace
    localparam V_MAX           = V_DISPLAY + V_T_BORDER + V_B_BORDER + V_RETRACE - 1;
    localparam START_V_RETRACE = V_DISPLAY + V_B_BORDER;
    localparam END_V_RETRACE   = V_DISPLAY + V_B_BORDER + V_RETRACE - 1;

    // mod-4 counter to generate 25 MHz pixel tick
    reg [1:0] pixel_reg;
    wire [1:0] pixel_next;
    wire pixel_tick;

    always @(posedge clk, posedge reset)
        if(reset) pixel_reg <= 0;
        else pixel_reg <= pixel_next;

    assign pixel_next = pixel_reg + 1; // increment pixel_reg 

    assign pixel_tick = (pixel_reg == 0); // assert tick 1/4 of the time

    // registers to keep track of current pixel location
    reg [9:0] h_count_reg, h_count_next, v_count_reg, v_count_next;
    
    // register to keep track of vsync and hsync signal states
    reg vsync_reg, hsync_reg;
    wire vsync_next, hsync_next;

    // infer registers
    always @(posedge clk, posedge reset)
        if(reset) begin
            v_count_reg <= 0;
            h_count_reg <= 0;
            vsync_reg   <= 0;
            hsync_reg   <= 0;
        end
        else begin
            v_count_reg <= v_count_next;
            h_count_reg <= h_count_next;
            vsync_reg   <= vsync_next;
            hsync_reg   <= hsync_next;
        end
        
    // next-state logic of horizontal vertical sync counters
    always @* begin
        h_count_next = pixel_tick ? 
                       h_count_reg == H_MAX ? 0 : h_count_reg + 1
                     : h_count_reg;
        
        v_count_next = pixel_tick && h_count_reg == H_MAX ? 
                       (v_count_reg == V_MAX ? 0 : v_count_reg + 1) 
                     : v_count_reg;
    end
    
    // hsync and vsync are active low signals
    // hsync signal asserted during horizontal retrace
    assign hsync_next = (h_count_reg >= START_H_RETRACE) && (h_count_reg <= END_H_RETRACE);

    // vsync signal asserted during vertical retrace
    assign vsync_next = (v_count_reg >= START_V_RETRACE) && (v_count_reg <= END_V_RETRACE);

    // video only on when pixels are in both horizontal and vertical display region
    assign video_on = (h_count_reg < H_DISPLAY) && (v_count_reg < V_DISPLAY);

    // output signals
    assign hsync  = hsync_reg;
    assign vsync  = vsync_reg;
    assign x      = h_count_reg;
    assign y      = v_count_reg;
    assign p_tick = pixel_tick;
endmodule


module vga(
    input wire clk,
    input wire [7:0] char,
    input wire en,
    output wire hsync, vsync,
    output wire [11:0] rgb
);

    parameter WIDTH = 640;
    parameter HEIGHT = 480;
    parameter CHAR_WIDTH = 8;    // Width of a character in pixels
    parameter CHAR_HEIGHT = 16;  // Height of a character in pixels
    parameter NUM_CHARS_X = WIDTH / CHAR_WIDTH; // Number of characters horizontally
    parameter NUM_CHARS_Y = HEIGHT / CHAR_HEIGHT; // Number of characters vertically

    // register for Basys 2 8-bit RGB DAC 
    reg [11:0] rgb_reg;
    reg reset = 0;
    wire [9:0] x, y;
    
    // video status output from vga_sync to tell when to route out rgb signal to DAC
    wire video_on;
    wire p_tick;

    // instantiate vga_sync
    vga_sync vga_sync_unit (
        .clk(clk), .reset(reset), 
        .hsync(hsync), .vsync(vsync), .video_on(video_on), .p_tick(p_tick), 
        .x(x), .y(y)
    );

    // font ROM (for 8x16 character, 256 characters)
    reg [7:0] font_rom [0:4095];  // 256 characters, each with 16 rows, 8 bits per row (8x16)

    // Load the font ROM from a file
    initial begin
        $readmemb("font.data", font_rom);  // Import the font from file (hex format)
    end

    // State for scrolling text or static text
    reg [7:0] text [0:NUM_CHARS_X*NUM_CHARS_Y-1]; // Array to hold characters for the screen
    integer i;
    
    reg [12:0] char_n;
    // Initialize the screen with some text, this can be modified at runtime
    initial begin
        for (i = 0; i < NUM_CHARS_X*NUM_CHARS_Y; i = i + 1) begin
          text[i] = "";
        end
        char_n = 13'b0000000000000;
    end
    
    reg last_rec;
    always @(posedge clk) begin
        if (~last_rec & en) begin
            if(char == "\r" || char == "\n") begin // new line
                char_n <= (char_n/NUM_CHARS_X) * NUM_CHARS_X + NUM_CHARS_X;
            end else begin
                if(char >= 32 && char <= 126) begin // add character
                    text[char_n] <= char;
                    char_n <= char_n + 1;
                end
            end
        end
        if(char_n >= NUM_CHARS_X*NUM_CHARS_Y) begin // clear when page full
            char_n <= 0;
            for (i = 0; i < NUM_CHARS_X*NUM_CHARS_Y; i = i + 1) begin
              text[i] = "";
            end
        end
        last_rec = en;
    end

    // Compute the character based on current (x, y)
    wire [7:0] character;
    wire [6:0] char_x, char_y;
    
    assign char_x = x / CHAR_WIDTH; // Find the column of the character
    assign char_y = y / CHAR_HEIGHT; // Find the row of the character
    assign character = text[char_y * NUM_CHARS_X + char_x]; // Determine which character to display

    // Determine the pixel location within the character
    wire char_pixel;
    assign char_pixel = font_rom[CHAR_HEIGHT * character + (y % CHAR_HEIGHT)][CHAR_WIDTH - 1 - (x % CHAR_WIDTH)]; // Access the correct row of the character

    // Determine color of the pixel
    always @(posedge p_tick) begin
        if (video_on && char_pixel) begin
            rgb_reg = 12'b111111111111;  // Display the color from switch if pixel part of character
        end
        else begin
            rgb_reg = 12'b0; // Black for empty pixels
        end
    end

    // output
    assign rgb = (video_on) ? rgb_reg : 12'b0;

endmodule



